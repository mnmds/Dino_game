import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.types import FSInputFile

from db import DataBase
from config import TG_BOT_TOKEN, ADMINS
from admin import IsAdmin, Admin

bot = Bot(token=TG_BOT_TOKEN)
db = DataBase()
# db.db__clear()
db.init()
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

last_message_id = None
admin = Admin()

max_level = 9


def start__get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–ù–∞—à —Ç–≥ –∫–∞–Ω–∞–ª", url="https://t.me/genshindropcom"),
            types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≥–µ–º—ã", url="genshindrop.com"),
            types.InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å", callback_data="a")
        ],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


# @dp.message(Command('ref'))
# async def cmd_ref(message: types.Message):
#     async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
#         text = (f'üöÄ –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: '
#                 f'https://t.me/testmmn_bot?start={message.from_user.id}')
#     await message.answer(text)


@dp.message(Command('start'))
async def process_start_command(message: types.Message, bot: Bot):
    db.connection__open()
    tg_id = message.from_user.id
    user = db.user__get(tg_id)
    referral = db.referral__get(tg_id)

    image_from_pc = FSInputFile("images/start.jpg")
    await message.answer_photo(
        image_from_pc,

        caption=f"*–ü–û–ú–û–ì–ò –ì–î–ó–ê–í–†–ò–ö–£ –î–û–°–¢–ê–í–ò–¢–¨ –ì–ï–ú–´\!* üíé\n\n"
                f"–ö–æ–º–∞–Ω–¥–∞ [genshindrop\.com](https://genshindrop.top/gdshop) "
                f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ –≥–µ–º–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã\.\n"
                f"*–ò –Ω–∞—à–∏–º –≥–¥–∑–∞–≤—Ä–∏–∫–∞–º –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å\!*\n\n"
                f"üî∏ –ü–æ–º–æ–≥–∞–π –≥–¥–∑–∞–≤—Ä–∏–∫—É –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≥–µ–º—ã\n"
                f"üî∏ –ü—Ä–æ–∫–∞—á–∏–≤–∞–π –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å\n"
                f"üî∏ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π\n"
                f"üî∏ –ü–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —ç—Ç–æ\!\n\n"
                f"–ë—É–¥—å –ª—É—á—à–∏–º –≥–¥–∑–∞–≤—Ä–∏–∫–æ–º –≤ —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π\! üíö\n\n"
                f"–ê –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –≥–µ–º—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç üëá",

        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=start__get_keyboard()
    )

    if not user:
        db.user__add(tg_id)
        # await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')

    if len(message.text.split()) != 2:
        # await message.answer(f'–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
        db.connection__cose()

        return

    host_tg_id = message.text.split()[-1]

    if int(host_tg_id) != int(tg_id):
        # invitation_date = time.time()
        # payment = 50

        # if message.from_user.is_premium:
        #     payment = 200

        db.referral__add(host_tg_id, tg_id)
        host_tg_info = await bot.get_chat(host_tg_id)
    #     await message.answer(f'–í–∞—Å –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{host_tg_info.username}')
    # elif host_tg_id == tg_id:
    #     await message.answer(f'–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è')
    # elif referral:
    #     await message.answer(f'–í–∞—Å —É–∂–µ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    db.connection__cose()


@dp.message(IsAdmin(ADMINS), Command("admin"))
async def cmd_admin(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@dp.callback_query(F.data.startswith("admin__"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("__")[1]

    if action == "quests":
        await admin.quests(callback.message)
    if action == "quest_add":
        await admin.quests_add(callback.message)
    if action == "quest_remove":
        await admin.quests_remove(callback.message)

    if action == "heroes":
        await admin.heroes(callback.message)
    if action == "newsletter":
        await admin.newsletter(callback.message)
    if action == "promocodes":
        await admin.promocodes(callback.message)
    if action == "statistics":
        await admin.statistics(callback.message, max_level)
    if action == "back":
        await admin.panel(callback.message)

    await callback.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
