import asyncio
import logging
import os
import time
import zipfile
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, WebAppInfo

from db import DataBase
from config import TG_BOT_TOKEN, ADMINS
from admin import IsAdmin, Admin, AdminStates

bot = Bot(token=TG_BOT_TOKEN)
db = DataBase()
db.connection__open()
# db.db__clear()
db.init()
dp = Dispatcher()
router = Router()
logging.basicConfig(level=logging.INFO)

last_message_id = None
admin = Admin()

max_level = 9
link_newsletters = ''
hero_name = ''


# async def scheduler(message):
#     while True:
#         # print(datetime.now().weekday())
#         now = datetime.now()
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
#         if now.weekday() == 6:  # 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
#             print(123)
#             # await message.answer(f"{now}")
#         #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—Ä–µ–º—è 10:00
#         #     if now.hour == 0 and now.minute == 5 and now.second == 0:
#         #         tg_ids = [item['tg_id'] for item in db.users__get_top()]
#         #         for tg_id in tg_ids:
#         #             await bot.send_message(chat_id=tg_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
#         #         # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã
#         #         time.sleep(60)


# @router.message(Command("time"))
# async def cmd_admin(message: types.Message):
#     # await message.answer("123")
#     # await scheduler(message)
#     tg_ids = [item['tg_id'] for item in db.users__get_top()]
#     for tg_id in tg_ids:
#         await bot.send_message(chat_id=tg_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

async def auto_posting():
    tg_ids = [item['tg_id'] for item in db.users__get_post()]
    for tg_id in tg_ids:
        await bot.send_message(chat_id=tg_id, text=f"–ù–∞—á–∞–ª–∞—Å—å —Ä–∞–∑–¥–∞—á–∞ –Ω–∞ —Å–∞–π—Ç–µ")


async def promocodes_posting():
    tg_ids = [item['tg_id'] for item in db.users__get_top()]
    codes = [item['name'] for item in db.promocodes__get()]
    for content in zip(tg_ids, codes):
        await bot.send_message(chat_id=content[0], text=f"–í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {content[1]}")


@router.message(Command('ref'))
async def cmd_ref(message: types.Message):
    await message.answer((f'üöÄ –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: '
                          f'https://t.me/testmmn_bot?start={message.from_user.id}'))


def start__get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–ù–∞—à —Ç–≥ –∫–∞–Ω–∞–ª", url="https://genshindrop.top/gdchannel"),
            types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≥–µ–º—ã", url="https://genshindrop.top/gdshop"),
            types.InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=f'https://mnmds.github.io/Dino_game/'))
        ],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(Command('start'))
async def process_start_command(message: types.Message, bot: Bot):
    tg_id = message.from_user.id
    user = db.user__get(tg_id)
    referral = db.referral__get(tg_id)

    image_from_pc = FSInputFile("images/start.jpg")
    await message.answer_photo(
        image_from_pc,

        caption=f"*–ü–û–ú–û–ì–ò –ì–î–ó–ê–í–†–ò–ö–£ –î–û–°–¢–ê–í–ò–¢–¨ –ì–ï–ú–´\!* üíé\n\n"
                f"–ö–æ–º–∞–Ω–¥–∞ [genshindrop\.com](https://genshindrop.top/gdshop) "
                f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ –≥–µ–º–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã\.\n"
                f"*–ò –Ω–∞—à–∏–º –≥–¥–∑–∞–≤—Ä–∏–∫–∞–º –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å\!*\n\n"
                f"üî∏ –ü–æ–º–æ–≥–∞–π –≥–¥–∑–∞–≤—Ä–∏–∫—É –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≥–µ–º—ã\n"
                f"üî∏ –ü—Ä–æ–∫–∞—á–∏–≤–∞–π –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å\n"
                f"üî∏ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π\n"
                f"üî∏ –ü–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —ç—Ç–æ\!\n\n"
                f"–ë—É–¥—å –ª—É—á—à–∏–º –≥–¥–∑–∞–≤—Ä–∏–∫–æ–º –≤ —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π\! üíö\n\n"
                f"–ê –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –≥–µ–º—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç üëá",

        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=start__get_keyboard()
    )

    if not user:
        db.user__add(tg_id)
        await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')

    if len(message.text.split()) != 2:
        # await message.answer(f'–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')

        return

    host_tg_id = message.text.split()[-1]

    if int(host_tg_id) != int(tg_id):
        # invitation_date = time.time()
        # payment = 50

        # if message.from_user.is_premium:
        #     payment = 200

        db.referral__add(host_tg_id, tg_id)
        host_tg_info = await bot.get_chat(host_tg_id)
    #     await message.answer(f'–í–∞—Å –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{host_tg_info.username}')
    # elif host_tg_id == tg_id:
    #     await message.answer(f'–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è')
    # elif referral:
    #     await message.answer(f'–í–∞—Å —É–∂–µ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')


@router.message(IsAdmin(ADMINS), Command("admin"))
async def cmd_admin(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.callback_query(F.data.startswith("cancel"))
async def cancel(callback: types.CallbackQuery, state: FSMContext):
    await admin.panel(callback.message)
    await state.clear()


@router.callback_query(F.data.startswith("admin___"))
async def admin___commands(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()

    action = callback.data.split("___")[1]

    if action == 'quest_remove':
        await admin.quests_remove(callback.message)
        await state.set_state(AdminStates.waiting__quest_remove)
    elif action == 'quest_add':
        await admin.quests_add(callback.message)
        await state.set_state(AdminStates.waiting__quest_add)
    elif action == 'product_remove':
        await admin.products_remove(callback.message)
        await state.set_state(AdminStates.waiting__product_remove)
    elif action == 'product_add':
        await admin.products_add(callback.message)
        await state.set_state(AdminStates.waiting__product_add)
    elif action == 'newsletters':
        await admin.newsletters_state_link(callback.message)
        await state.set_state(AdminStates.waiting__newsletters)
    elif action == 'promocode_remove':
        await admin.promocodes_remove(callback.message)
        await state.set_state(AdminStates.waiting__promocode_remove)
    elif action == 'promocode_add':
        await admin.promocodes_add(callback.message)
        await state.set_state(AdminStates.waiting__promocode_add)
    elif action == "users":
        await admin.users(callback.message)
        await state.set_state(AdminStates.waiting__users)


@router.message(AdminStates.waiting__quest_remove)
async def quests_remove_state(message: types.Message, state: FSMContext):
    await admin.quests_remove_state(message)
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__quest_add)
async def quests_add_state(message: types.Message, state: FSMContext):
    await admin.quests_add_state(message)
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__product_remove)
async def products_remove_state(message: types.Message, state: FSMContext):
    await admin.products_remove_state(message)
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__product_add)
async def products_add_state(message: types.Message, state: FSMContext):
    global hero_name

    key = await admin.products_add_file(message)
    if key:
        hero_name = key
        await state.set_state(AdminStates.waiting__product_info)
    else:
        await state.clear()
        await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__product_info)
async def products_add_state(message: types.Message, state: FSMContext):
    global hero_name

    await admin.products_add_state(message, hero_name)
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__newsletters)
async def newsletters_state(message: types.Message, state: FSMContext):
    global link_newsletters
    link_newsletters = message.text
    if '|' in link_newsletters:
        link_newsletters = link_newsletters.split('|')
        await admin.newsletters_state_message(message)
        await state.set_state(AdminStates.waiting__newsletters_link)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__newsletters_link)
async def newsletters_state(message: types.Message, state: FSMContext):
    global link_newsletters
    if admin.is_valid_url(link_newsletters[1]):
        await admin.newsletters_state(message, link_newsletters[0], link_newsletters[1])
        link_newsletters = ''
        await state.clear()
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__promocode_remove)
async def quests_remove_state(message: types.Message, state: FSMContext):
    await admin.promocodes_remove_state(message)
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__promocode_add)
async def quests_add_state(message: types.Message, state: FSMContext):
    await admin.promocodes_add_state(message)
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.message(AdminStates.waiting__users)
async def quests_add_state(message: types.Message, state: FSMContext):
    await admin.users_get(message)
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin.get_keyboard())


@router.callback_query(F.data.startswith("admin__"))
async def admin__commands(callback: types.CallbackQuery):
    action = callback.data.split("__")[1]

    if action == "quests":
        await admin.quests(callback.message)
    elif action == "products":
        await admin.products(callback.message)
    elif action == "newsletters":
        await admin.newsletters(callback.message)
    elif action == "promocodes":
        await admin.promocodes(callback.message)
    elif action == "statistics":
        await admin.statistics(callback.message, max_level)
    elif action == "back":
        await admin.panel(callback.message)

    await callback.answer()
